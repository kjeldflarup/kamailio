#!KAMAILIO
 
debug=1
log_stderror=no
memdbg=5
memlog=5
 
log_facility=LOG_LOCAL0
#log_prefix="{$mt $rm $hdr(CSeq) $ci} "
 
fork=yes
children=1
tcp_children=1
tcp_connect_timeout=1
tcp_accept_aliases=yes
tcp_keepalive=yes
# server thing force_tcp_alias

# Note: For NAT traversal of TCP clients it is better to not use tcp_accept_aliases but just use nathelper module and fix_nated_[contact|register] functions.

loadmodule "pv.so"
listen=PBXIP:PBXPORT 

mhomed=1

tcp_connection_lifetime=3605

 
loadmodule "xlog.so"
loadmodule "textops.so"
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "siputils.so"
loadmodule "dialog.so"

# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
# - note: this is the same as route { ... }
request_route {
    	xlog("L_ALERT", "si=$si\n");

	if (is_method("OPTIONS"))
	{
		exit;
	}

	# handle requests within SIP dialogs
	if (has_totag()) {
		if (loose_route()) {
			if ( is_method("ACK") ) {
				xlog("L_ALERT","ACK $si $hdr(via[0]) \n");
			}
			route(RELAY);
		} else {
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
 
	# CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
			t_relay();
		exit;
	}
 
	t_check_trans();

	# reject garbage
	if (is_method("PUBLISH|SUBSCRIBE"))
	{
		send_reply("501", "Method Not Implemented");
		exit;
	}

	if (is_method("NOTIFY") )
	{
		send_reply("489", "Bad event");
		exit;
	}

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");

	if (is_method("INVITE|SUBSCRIBE"))
	{
		record_route();
	}
 
	if ($rU==$null)
	{
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

 
    #$du = "sip:192.168.2.2:5080;transport=tcp";
    #$tu = "sip:"+$tU+"@192.168.2.2:5080;transport=tcp";
    #$ru = "sip:"+$tU+"@192.168.2.2:5080;transport=tcp";
    $du = "sip:" + $env(FORWARDURL);
    $tu = "sip:"+$tU+"@" + $env(FORWARDURL);
    $ru = "sip:"+$tU+"@" + $env(FORWARDURL);

    t_on_reply("REGISTRAR_MANAGE_REPLY");
    if (is_method("INVITE")) {
	dlg_manage(); # TO make sure that CSEQ is incremented on INVITE AUTH

	if (!t_relay())
	{ 
		sl_send_reply("500", "relaying failed");
       		xlog("relay error: $rm $si $du $tu \n");
		exit(1);
	};
    }
}
 
route[RELAY] {
	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		t_on_branch("REGISTRAR_MANAGE_BRANCH");
		t_on_reply("REGISTRAR_MANAGE_REPLY");
		#t_on_failure("MANAGE_FAILURE");
       	}

	if (!t_relay()) {
 		xlog("L_ALERT","T_RELAY_ERROR '$rm $avp(type)'\n");
		sl_reply_error();
	}
	exit;
}
 
# Register reply from GSM and log the ringing to prevent action from 5070 instance
onreply_route[REGISTRAR_MANAGE_REPLY] {
	#xlog("L_ALERT", "onreply_route[REGISTRAR_MANAGE_REPLY]");
	return 1;
}

branch_route[REGISTRAR_MANAGE_BRANCH] {
	return 1;
}

 


